from pprint import pprint

import cv2
import mediapipe as mp
import numpy as np

mp_drawing = mp.solutions.drawing_utils
mp_pose = mp.solutions.pose
mp_holistic = mp.solutions.holistic

# Setting up the Pose function.
pose = mp_pose.Pose(static_image_mode=True, min_detection_confidence=0.5, model_complexity=2)
pose_video = mp_pose.Pose(static_image_mode=False, min_detection_confidence=0.5, model_complexity=1)


def detectPose(images, pose, display=True):
    # To check for Image use or Video Use
    if not display:

        # Convert the BGR image to RGB before processing.
        results = pose.process(cv2.cvtColor(images, cv2.COLOR_BGR2RGB))

        # Draw pose landmarks on the image.
        annotated_image = images.copy()
        mp_drawing.draw_landmarks(annotated_image, results.pose_landmarks, mp_pose.POSE_CONNECTIONS)
        point = []
        try:
            # Extract landmarks
            point = results.pose_landmarks.landmark
        except:
            print("Halted!")
            pass

        # Return the output image and the found landmarks.
        return annotated_image, point

    else:
        # Convert the image from BGR into RGB format.
        images = cv2.cvtColor(images, cv2.COLOR_BGR2RGB)

        # To improve performance, optionally mark the image as not writeable to
        # pass by reference.
        images.flags.writeable = False

        # Perform the Pose Detection.
        results = pose.process(images)

        # Recoloring image from RGB image to BGR.
        images.flags.writeable = True
        images = cv2.cvtColor(images, cv2.COLOR_RGB2BGR)
        try:
            point = results.pose_landmarks.landmark

            # Check if any landmarks are detected.
            if point:
                # Draw Pose landmarks on the output image.
                mp_drawing.draw_landmarks(
                    images, point, mp_pose.POSE_CONNECTIONS)

                # Plot the Pose landmarks in 3D.
                mp_drawing.plot_landmarks(results.pose_world_landmarks, mp_pose.POSE_CONNECTIONS)
        except:
            print("Halt!")
            pass


def calculate_angle(point1, point2, point3):
    point1 = np.array(point1)
    point2 = np.array(point2)
    point3 = np.array(point3)

    radians = np.arctan2(point3[1] - point2[1], point3[0] - point2[0]) - np.arctan2(point1[1] - point2[1], point1[0] -
                                                                                    point2[0])
    angle_here = np.abs(radians * 180.0 / np.pi)

    if angle_here > 180.0:
        angle_here = 360 - angle_here

    return angle_here


def classifyPose(landmarks, output_images, display=False):
    # Initialize the label of the pose. It is not known at this stage.
    label = 'Unknown Pose'

    # Specify the color (Red) with which the label will be written on the image.
    color = (0, 0, 255)

    # Storing points into variables
    left_shoulder = [landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value].x,
                     landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value].y]
    left_elbow = [landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value].x,
                  landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value].y]
    left_wrist = [landmarks[mp_pose.PoseLandmark.LEFT_WRIST.value].x,
                  landmarks[mp_pose.PoseLandmark.LEFT_WRIST.value].y]
    left_hip = [landmarks[mp_pose.PoseLandmark.LEFT_HIP.value].x,
                landmarks[mp_pose.PoseLandmark.LEFT_HIP.value].y]
    left_knee = [landmarks[mp_pose.PoseLandmark.LEFT_KNEE.value].x,
                 landmarks[mp_pose.PoseLandmark.LEFT_KNEE.value].y]
    left_ankle = [landmarks[mp_pose.PoseLandmark.LEFT_ANKLE.value].x,
                  landmarks[mp_pose.PoseLandmark.LEFT_ANKLE.value].y]
    left_index = [landmarks[mp_pose.PoseLandmark.LEFT_INDEX.value].x,
                  landmarks[mp_pose.PoseLandmark.LEFT_INDEX.value].y]
    left_foot_index = [landmarks[mp_pose.PoseLandmark.LEFT_FOOT_INDEX.value].x,
                       landmarks[mp_pose.PoseLandmark.LEFT_FOOT_INDEX.value].y]
    right_shoulder = [landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value].x,
                      landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value].y]
    right_elbow = [landmarks[mp_pose.PoseLandmark.RIGHT_ELBOW.value].x,
                   landmarks[mp_pose.PoseLandmark.RIGHT_ELBOW.value].y]
    right_wrist = [landmarks[mp_pose.PoseLandmark.RIGHT_WRIST.value].x,
                   landmarks[mp_pose.PoseLandmark.RIGHT_WRIST.value].y]
    right_hip = [landmarks[mp_pose.PoseLandmark.RIGHT_HIP.value].x,
                 landmarks[mp_pose.PoseLandmark.RIGHT_HIP.value].y]
    right_knee = [landmarks[mp_pose.PoseLandmark.RIGHT_KNEE.value].x,
                  landmarks[mp_pose.PoseLandmark.RIGHT_KNEE.value].y]
    right_ankle = [landmarks[mp_pose.PoseLandmark.RIGHT_ANKLE.value].x,
                   landmarks[mp_pose.PoseLandmark.RIGHT_ANKLE.value].y]
    right_index = [landmarks[mp_pose.PoseLandmark.RIGHT_INDEX.value].x,
                   landmarks[mp_pose.PoseLandmark.RIGHT_INDEX.value].y]
    right_foot_index = [landmarks[mp_pose.PoseLandmark.RIGHT_FOOT_INDEX.value].x,
                        landmarks[mp_pose.PoseLandmark.RIGHT_FOOT_INDEX.value].y]

    # calculating the angles on each point
    leftWristAngle = calculate_angle(left_elbow, left_wrist, left_index)
    leftElbowAngle = calculate_angle(left_shoulder, left_elbow, left_wrist)
    leftShoulderAngle = calculate_angle(left_hip, left_shoulder, left_elbow)
    leftHipAngle = calculate_angle(left_knee, left_hip, left_shoulder)
    leftKneeAngle = calculate_angle(left_ankle, left_knee, left_hip)
    leftAnkleAngle = calculate_angle(left_foot_index, left_knee, left_hip)
    rightWristAngle = calculate_angle(right_elbow, right_wrist, right_index)
    rightElbowAngle = calculate_angle(right_shoulder, right_elbow, right_wrist)
    rightShoulderAngle = calculate_angle(right_hip, right_shoulder, right_elbow)
    rightHipAngle = calculate_angle(right_knee, right_hip, right_shoulder)
    rightKneeAngle = calculate_angle(right_ankle, right_knee, right_hip)
    rightAnkleAngle = calculate_angle(right_foot_index, right_knee, right_hip)

    angles = [leftWristAngle, leftElbowAngle, leftShoulderAngle, leftHipAngle, leftKneeAngle, leftAnkleAngle,
              rightWristAngle, rightElbowAngle, rightShoulderAngle, rightHipAngle, rightKneeAngle,
              rightAnkleAngle]

    angleStrings = ["leftWristAngle", "leftElbowAngle", "leftShoulderAngle", "leftHipAngle", "leftKneeAngle",
                    "leftAnkleAngle", "rightWristAngle", "rightElbowAngle", "rightShoulderAngle",
                    "rightHipAngle", "rightKneeAngle", "rightAnkleAngle"]

    bodyAngles = dict(zip(angleStrings, angles))
    pprint(bodyAngles, width=1)

    # Check if it is the warrior II pose or the T pose.
    # As for both of them, both arms should be straight and shoulders should be at the specific angle.
    # Check if the both arms are straight.
    if (150 < leftElbowAngle < 180) and (150 < rightElbowAngle < 180):
        # Check if shoulders are at the required angle.
        if (70 < leftShoulderAngle < 120) and (70 < rightShoulderAngle < 120):
            # Check if it is the warrior II pose.
            # Check if one leg is straight.
            if (150 < leftKneeAngle < 180) or (150 < rightKneeAngle < 180):
                # Check if the other leg is bent at the required angle.
                if (40 < leftKneeAngle < 120) or (40 < rightKneeAngle < 120):
                    # Specify the label of the pose that is Warrior II pose.
                    label = 'Warrior II Pose'
            # Check if it is the T pose.
            # Check if both legs are straight
            if (150 < leftKneeAngle < 180) and (150 < rightKneeAngle < 180):
                # Specify the label of the pose that is tree pose.
                label = 'T Pose'
    # Check if it is the tree pose
    # Check if one of the legs are straight
    if (150 < leftKneeAngle < 180) or (150 < rightKneeAngle < 180):
        # Check if the other leg is bent at the required angle.
        if (25 < leftKneeAngle < 80) or (25 < rightKneeAngle < 80):
            label = 'Tree Pose'
    # Check if the pose is classified successfully
    if label != 'Unknown Pose':
        # Update the color (to green) with which the label will be written on the image.b
        color = (0, 255, 0)

    # Write the label on the output image.
    cv2.putText(output_images, label, (10, 50), cv2.FONT_HERSHEY_PLAIN, 3, color, 5)

    if display:
        # Write the label on the output image.
        cv2.putText(output_images, label, (10, 50), cv2.FONT_HERSHEY_PLAIN, 3, color, 5)

    else:

        # Return the output image and the classified label.
        return output_images, label


# to read an image
# image = cv2.imread('00000018.jpg')
# output_image, points = detectPose(image, pose, display=False)
# if points:
#     classifyPose(points, output_image, display=False)
# cv2.imwrite(r'00000018.png', output_image)

# Initialize the VideoCapture object to read from the webcam.
video = cv2.VideoCapture(0)
#
# # Initialize the VideoCapture object to read from a video stored in the disk.
# # video = cv2.VideoCapture('media/running.mp4')

while video.isOpened():
    # Read a frame.
    success, frame = video.read()

    # Check if frame is not read properly.
    if not success:
        print("Ignoring empty camera frame.")

        # If loading a video, use 'break' instead of 'continue'.
        break

    # Perform Pose landmark detection.
    frame, landmarks = detectPose(frame, pose_video, display=False)
    if landmarks:
        frame, _ = classifyPose(landmarks, frame, display=False)

    # Display the frame.
    cv2.imshow('Pose Detection', frame)

    # Wait until a key is pressed.
    # Retrieve the ASCII code of the key pressed
    k = cv2.waitKey(1) & 0xFF

    # Check if 'ESC' is pressed.
    if k == 27:
        # Break the loop.
        break

# Release the VideoCapture object.
video.release()

# Close the windows.
cv2.destroyAllWindows()
